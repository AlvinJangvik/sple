using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System.Collections.Generic;

namespace Template
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Texture2D tennisball2;
        Vector2 tennisball2Pos = new Vector2(10, 10);
        List<Vector2> bulletPos = new List<Vector2>();
        KeyboardState kNewState = Keyboard.GetState();
        KeyboardState kOldState;
        //KOmentar
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";

        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);



            // TODO: use this.Content to load your game content here 

            tennisball2 = Content.Load<Texture2D>("tennisball2");
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            kNewState = Keyboard.GetState();

            if (kNewState.IsKeyDown(Keys.Right))
            {
                tennisball2Pos.X += 10;
            }
            if (kNewState.IsKeyDown(Keys.Left))
            {
                tennisball2Pos.X -= 10;
            }

            if (kNewState.IsKeyDown(Keys.Up))
            {
                tennisball2Pos.Y -= 10;
            }
            if (kNewState.IsKeyDown(Keys.Down))
            {
                tennisball2Pos.Y += 10;
            }

            if (kNewState.IsKeyDown(Keys.Space) && kOldState.IsKeyUp(Keys.Space))
            {
                bulletPos.Add(tennisball2Pos + new Vector2(20, 0));
            }
            for (int i = 0; i < bulletPos.Count; i++)
            {
                bulletPos[i] = bulletPos[i] - new Vector2(0, 7);
            }

            kOldState = kNewState;
            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here.
            GraphicsDevice.Clear(Color.Black);
            spriteBatch.Begin();

            Rectangle rec = new Rectangle();
            rec.Location = tennisball2Pos.ToPoint();
            rec.Size = new Point(50, 50);

            spriteBatch.Draw(tennisball2, rec, Color.White);

            for (int i = 0; i < bulletPos.Count; i++)
            {
                rec.Location = bulletPos[i].ToPoint();
                rec.Size = new Point(10, 10);
                spriteBatch.Draw(tennisball2, rec, Color.White);
            }

            spriteBatch.End();

            base.Draw(gameTime);
        }
    }
}
